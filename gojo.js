const fs = require('fs');
const path = require('path');
const axios = require('axios');
const AdmZip = require('adm-zip');

async function downloadAndExtractZip(zipUrl) {
  const zipPath = path.join(__dirname, 'temp.zip');
  const extractPath = __dirname;

  try {
    // ZIP ‡∂ë‡∂ö ‡∂∂‡∑è‡∂ú‡∂±‡∑ä‡∂±‡∑Ä‡∑è
    const response = await axios({
      method: 'GET',
      url: zipUrl,
      responseType: 'stream'
    });

    const writer = fs.createWriteStream(zipPath);
    response.data.pipe(writer);

    await new Promise((resolve, reject) => {
      writer.on('finish', resolve);
      writer.on('error', reject);
    });

    console.log('‚úÖ ZIP ‡∂ë‡∂ö ‡∂∂‡∑è‡∂ú‡∂≠‡∑ä‡∂≠‡∑è.');

    // Extract
    const zip = new AdmZip(zipPath);
    zip.extractAllTo(extractPath, true);
    console.log('‚úÖ ZIP ‡∂ë‡∂ö extract ‡∂ö‡∂ª‡∑è.');

    // Delete ZIP
    fs.unlinkSync(zipPath);
    console.log('üóëÔ∏è ZIP file ‡∂ë‡∂ö delete ‡∂ö‡∂ª‡∑è.');

    // Plugins load ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    const pluginDir = path.join(__dirname, 'plugins');
    if (fs.existsSync(pluginDir)) {
      const plugins = fs.readdirSync(pluginDir).filter(f => f.endsWith('.js'));
      for (const file of plugins) {
        try {
          require(path.join(pluginDir, file));
          console.log(`‚úÖ Plugin loaded: ${file}`);
        } catch (e) {
          console.error(`‚ùå Plugin load error (${file}):`, e);
        }
      }
    } else {
      console.warn('‚ö†Ô∏è plugins folder ‡∂ë‡∂ö ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑î‡∂´‡∑è!');
    }

  } catch (err) {
    console.error('‚ùå Error during setup:', err);
  }
}

const zipUrl = 'https://files.catbox.moe/jbz1vo.zip';
downloadAndExtractZip(zipUrl);
