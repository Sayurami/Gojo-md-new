const fs = require('fs');
const path = require('path');
const axios = require('axios');
const AdmZip = require('adm-zip');
const { spawn } = require('child_process');

async function downloadAndExtractZip(zipUrl) {
  const zipPath = path.join(__dirname, 'temp.zip');
  const extractPath = __dirname;

  try {
    // ZIP ‡∂ë‡∂ö download ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
    const response = await axios({
      method: 'GET',
      url: zipUrl,
      responseType: 'stream'
    });

    const writer = fs.createWriteStream(zipPath);
    response.data.pipe(writer);

    await new Promise((resolve, reject) => {
      writer.on('finish', resolve);
      writer.on('error', reject);
    });

    console.log('‚úÖ ZIP ‡∂ë‡∂ö ‡∂∂‡∑è‡∂ú‡∂≠‡∑ä‡∂≠‡∑è.');

    // ZIP extract ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
    const zip = new AdmZip(zipPath);
    zip.extractAllTo(extractPath, true);
    console.log('‚úÖ ZIP ‡∂ë‡∂ö extract ‡∂ö‡∂ª‡∑è.');

    // ZIP file ‡∂ë‡∂ö delete ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
    fs.unlinkSync(zipPath);
    console.log('üóëÔ∏è ZIP file ‡∂ë‡∂ö delete ‡∂ö‡∂ª‡∑è.');

    // Extract ‡∑Ä‡∑ô‡∂Ω‡∑è ‡∂á‡∂≠‡∑í folder list ‡∂ë‡∂ö ‡∂∂‡∂Ω‡∂±‡∑ä‡∂±
    const extractedFolders = fs.readdirSync(extractPath)
      .filter(f => fs.statSync(path.join(extractPath, f)).isDirectory());
    console.log('Extracted folders:', extractedFolders);

    if (extractedFolders.length === 0) {
      console.error('‚ùå Extracted folder ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑ì‡∂∫.');
      return;
    }

    // Main extracted folder ‡∂ë‡∂ö assume ‡∂ö‡∂ª‡∂∏‡∑î ‡∂¥‡∑Ö‡∑Ä‡∑ô‡∂±‡∑í ‡∂ë‡∂ö
    const mainExtractedFolder = extractedFolders[0];
    const mainFolderPath = path.join(extractPath, mainExtractedFolder);

    // plugins folder path
    const pluginPath = path.join(mainFolderPath, 'plugins');
    if (fs.existsSync(pluginPath)) {
      const pluginFiles = fs.readdirSync(pluginPath).filter(f => f.endsWith('.js'));
      for (const file of pluginFiles) {
        try {
          require(path.join(pluginPath, file));
          console.log(`‚úÖ Plugin ‡∂ë‡∂ö load ‡∑Ä‡∑î‡∂±‡∑è: ${file}`);
        } catch (err) {
          console.error(`‚ùå Plugin load error: ${file}`, err);
        }
      }
    } else {
      console.warn('‚ö†Ô∏è Plugins folder ‡∂ë‡∂ö ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑î‡∂´‡∑è:', pluginPath);
    }

    // index.js path ‡∂∂‡∂Ω‡∂∏‡∑î
    const indexPath = path.join(mainFolderPath, 'index.js');
    if (!fs.existsSync(indexPath)) {
      console.error('‚ùå index.js file ‡∂ë‡∂ö ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑ì‡∂∫:', indexPath);
      return;
    }

    // Bot start ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
    console.log(`üöÄ Bot ‡∂ë‡∂ö ${indexPath} ‡∑Ä‡∑ô‡∂≠‡∑í‡∂±‡∑ä start ‡∑Ä‡∑ô‡∂∏‡∑í‡∂±‡∑ä...`);
    const bot = spawn('node', [indexPath], { stdio: 'inherit', cwd: mainFolderPath });

    bot.on('exit', (code) => {
      console.log(`üîÅ Bot ‡∂ë‡∂ö ‡∂±‡∑Ä‡∂≠‡∑ä‡∑Ä‡∑î‡∂±‡∑è code ‡∂ë‡∂ö: ${code}`);
    });

  } catch (err) {
    console.error('‚ùå Setup ‡∂ë‡∂ö‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä:', err);
  }
}

const zipUrl = 'https://files.catbox.moe/59cwqr.zip'; // ‡∂î‡∂∫‡∑è‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ URL ‡∂ë‡∂ö ‡∂Ø‡∑è‡∂±‡∑ä‡∂±
downloadAndExtractZip(zipUrl);
